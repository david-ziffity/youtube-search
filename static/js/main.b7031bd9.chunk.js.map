{"version":3,"sources":["components/SearchForm.js","components/ListItem.js","components/Lister.js","components/ItemDetail.js","api/youtube.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","state","term","valid","helpTextClass","onSearchSubmit","e","preventDefault","length","setState","props","onChange","onSearchChange","target","value","className","onSubmit","this","htmlFor","label","type","Component","ListItem","item","onClickItem","onClick","src","snippet","thumbnails","medium","url","alt","description","title","Lister","list","onSelectItem","lists","map","i","key","id","videoId","ItemDetail","videourl","frameBorder","axios","create","baseURL","params","part","maxResults","App","selectedItem","onSearchFormChange","a","youtube","get","q","response","data","items","render","renderContent","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b7031bd9.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass SearchForm extends Component {\n\n    state = {term: '', valid: true}\n\n    helpTextClass = 'text-muted form-text';\n\n    onSearchSubmit = (e) => {\n        e.preventDefault();\n        (this.state.term.length > 2) ? this.setState({valid: true}) : this.setState({valid: false});\n        if (this.state.term.length > 2) {\n            this.props.onChange(this.state.term);\n        }\n    }\n\n    onSearchChange = (e) => {\n        this.setState({term: e.target.value});\n    }\n\n    render() {\n        return (\n          <div className=\"card youtube-search-form mb-4 shadow-sm\">\n              <div className=\"card-body\">\n                  <form onSubmit={this.onSearchSubmit}>\n                      <div className=\"form-group\">\n                          <label htmlFor=\"exampleInputEmail1\">{this.props.label}</label>\n                          <input type=\"text\" className=\"form-control\" value={this.state.term} onChange={this.onSearchChange} />\n                          <small className={!this.state.valid ? 'text-danger' : 'text-muted'}>Enter minimun 3 Charector</small>\n                      </div>\n                  </form>\n              </div>\n          </div>\n          );\n    }\n}\n\nexport default SearchForm;","import React from 'react';\n\nconst ListItem = ({item, onClickItem}) => {\n    return (\n      <div className=\"card list-item mb-2 shadow-sm\" onClick={() => onClickItem(item)} >\n          <div className=\"card-body media\">\n              <img className=\"mr-3\" src={item.snippet.thumbnails.medium.url} alt={item.snippet.description} />\n              <div className=\"media-body\">\n                  <strong className=\"mt-0\">{item.snippet.title}</strong>\n              </div>\n          </div>\n      </div>\n      );\n};\n\nexport default ListItem;","import React from 'react';\nimport ListItem from './ListItem';\n\nconst Lister = ({list, onSelectItem}) => {\n    \n    if (!list) {\n        return null;\n    }\n\n    const lists = list.map((item, i) => <ListItem item={item} key={item.id.videoId} onClickItem={onSelectItem} />);\n\n    return (\n      <div className=\"lister\">\n          {lists}\n      </div>\n      );\n};\n\nexport default Lister;","import React from 'react';\n\nconst ItemDetail = ({item}) => {\n\n    if (!item) {\n        return null;\n    }\n\n    const videourl = `http://www.youtube.com/embed/${item.id.videoId}`;\n\n    return (\n      <div className=\"item-detail card mb-4\">\n          <div className=\"embed-responsive embed-responsive-16by9\">\n              <iframe title=\"Video player\" className=\"embed-responsive-item\" src={videourl} frameBorder=\"0\"></iframe>\n          </div>\n          <div className=\"card-body\">\n              <h5>{item.snippet.title}</h5>\n              <p>{item.snippet.description}</p>\n          </div>\n      </div>\n      );\n};\n\nexport default ItemDetail;","import axios from 'axios';\n\nconst KEY = 'AIzaSyCsPiJ10WoKLAbKue9ZJ48x4d1NjzwsYvo';\n\n\nexport default  axios.create({\n    baseURL: 'https://www.googleapis.com/youtube/v3',\n    params: {\n        key: KEY,\n        part: 'snippet',\n        type: 'video',\n        maxResults: 5\n    }\n});\n\n ","import React, {Component}\nfrom 'react';\nimport SearchForm from './components/SearchForm';\nimport Lister from './components/Lister';\nimport ItemDetail from './components/ItemDetail';\nimport youtube from './api/youtube';\n\nimport './App.css';\n\nclass App extends Component {\n\n    state = {\n        list: [],\n        selectedItem: null\n    }\n\n    onSearchFormChange = async (term) => {\n        const response = await youtube.get(\n          '/search',\n          {params: {q: term}\n          });\n\n        this.setState({\n            list: response.data.items,\n            selectedItem: response.data.items[0]\n        });\n    }\n\n    onSelectItem = (item) => {\n        this.setState({selectedItem: item});\n    }\n\n    componentDidMount() {\n        this.onSearchFormChange('seven wonders');\n    }\n\n    renderContent() {\n        if (!this.state.list.length) {\n            return (\n              <div className=\"container\">\n                  <div className=\"alert alert-danger text-center m-5\">Loading !</div>\n              </div>\n              )\n        }\n\n        return (\n          <div className=\"youtube-app container mt-4\">\n              <SearchForm label=\"Enter search Term:\" onChange={this.onSearchFormChange} />\n              <div className=\"row\">\n                  <div className=\"col-lg-7\">\n                      <ItemDetail item={this.state.selectedItem} />\n                  </div>\n                  <div className=\"col-lg-5\">\n                      <Lister list={this.state.list} onSelectItem={this.onSelectItem} />\n                  </div>\n              </div>\n          </div>\n          );\n    }\n\n    render = () => this.renderContent();\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}